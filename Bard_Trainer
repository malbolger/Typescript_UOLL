let instrument = [0xEB2];     //The type on instrument we use.
let on = true;                //Is the script on?
let tickTime = 1000;          //How long each tick is (1000 is 1 second).
let itemCooldownTick = 2;     //Set to max to skip initial wait.
let skillCooldownTick = 10;   //Set to max to skip initial wait.
let itemCooldownMax = 2;      //Amount of seconds between item uses.
let skillCooldownMax = 10;    //Amount of seconds betwwen skill uses.
let waitActionTimeout = 2000; //How long before we timeout an action
let trainPeaceBool = false;   //Do we want to train peacemaking?
let trainProvoBool = true;    //Do we want to train provocation?
let trainMusicBool = true;    //Do we want to train musicianship?
let provoTargetOne = null;    //Target one for provocation (leave null)
let provoTargetTwo = null;    //Target two for provocation (leave null)


while (on) {
  let myInstrument = client.findType(instrument[0], undefined, player.serial);
  //Peacemaking
  if (trainPeaceBool) {
    if (myInstrument != null) {
      if (skillCooldownTick >= skillCooldownMax) {
        player.useSkill(Skills.Peacemaking);
        target.waitTargetSelf(waitActionTimeout);
        skillCooldownTick = 0;
      }
      skillCooldownTick++;
      sleep(tickTime);
    }
  }
  //Provocation
  if (trainProvoBool) {
    if (myInstrument != null) {
      if (skillCooldownTick >= skillCooldownMax) {
        if (provoTargetOne == null && provoTargetTwo == null) {
          client.headMsg("Provo Target One", player);
          provoTargetOne = target.query(false);
          client.headMsg("Target set!", player);
          sleep(500);
          client.headMsg("Provo Target Two", player);
          provoTargetTwo = target.query(false);
          client.headMsg("Target set!", player);
        }
        else {
          player.useSkill(Skills.Provocation);
          target.waitTargetEntity(provoTargetOne);
          target.waitTargetEntity(provoTargetTwo); 
          skillCooldownTick = 0;         
        }       
      }
      skillCooldownTick++
      sleep(tickTime);
    }
  }
  if (trainMusicBool) {
    if (itemCooldownTick >= itemCooldownMax) {
      player.use(client.findType(instrument[0]));
      itemCooldownTick = 0;
    }
    itemCooldownTick++;
  }
}
